Porównano działanie funkcji fzero z dwoma punktami startowymi: 4.5 i 6.0.
Użycie opcji optimset('Display','iter') pozwoliło analizować przepowadzane działania w konsoli.

Punkt startowy: 4.5:
- Algorytm po kilku krokach znalazł przedział, w którym następuje zmiana znaku: [4.24544, 4.75456].
- Następnie próbował znaleźć miejsce zerowe w tym przedziale, używając metody bisekcji i interpolacji.
- Udało mu się znaleźć punkt x1 = 4.71238, lecz wymagało to aż łącznie 68 iteracji.
- Jednak zamiast miejsca zerowego, znalazł asymptotę, czyli punkt, w którym funkcja nie jest określona i dąży do nieskończoności, stąd po podstawieniu otrzymanej przez nas wartości do funkcji tan(), otrzymaliśmy ogromny wynik: 5.1019e+14.
- Matlab wykrył, że znaleziony punkt nie odpowiada miejscu zerowemu i ostrzegł, że x może znajdować się w pobliżu punktu osobliwego.
- Wykrył to po tym, że f(x) zwiększała się w wielkości wraz ze zmniejszaniem się przedziału, czyli zbiegała do nieskończonośći.

Punkt startowy: 6.0:
- Tutaj już nie było takich problemów, algorytm również po kilku krokach znalazł przedział, w którym następuje zmiana znaku: [5.66059, 6.33941].
- Miejsce zerowe w tym przedziale zostało znalezione używając jedynie metody interpolacji.
- W łącznie 13 iteracjach osiągnięto wynik x2 = 6.28318 (2*pi), który po podstawieniu daje wartość: -2.449293598294706e-16, czyli liczbę bardzo bardzo bliską zeru, czyli to czego szukaliśmy.

Wnioski:
Wybór punktu startowego ma ogromne znaczenie dla działania funkcji fzero. Opcja optimset('Display','iter') pozwoliła nam przeanalizować dokładne działanie algorytmu i wykryć błąd.
Błąd był również do zauważenia tym, że po podstawieniu otrzymywaliśmy wartość dążącą do nieskończoności, zamiast oczekiwanego przez nas zera.
W przypadku funkcji nieciągłych, należy unikać zaczynania od puntu startowego znajdującego się przy asymptocie.